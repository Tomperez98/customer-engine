[project]
name = "customer-engine-api"
version = "0.1.50"
description = "Add your description here"
authors = [{ name = "Tomperez98", email = "tomasperezalvarez@gmail.com" }]
dependencies = [
    "lego-workflows >= 0.0.6, < 0.1.0",
    "sqlalchemy-libsql",
    "python-dotenv < 2",
    "fastapi < 1",
    "uvicorn[standard] < 1",
    "httpx < 1",
    "gunicorn < 22",
    "mashumaro < 4",
    "loguru < 1",
    "qdrant-client < 2",
    "cohere < 5",
    "pydantic >= 2, < 3",
    "orjson",
    "cryptography",
    "pyjwt < 3",
    "python-multipart",
    "jinja2",
    "stamina",
    "result",
]
readme = "README.md"
requires-python = ">= 3.12"

[project.scripts]
customer-engine = "customer_engine_api.cli.__main__:cli"

[project.urls]
Documentation = "https://github.com/Tomperez98/customer-engine/backend#readme"
Issues = "https://github.com/Tomperez98/customer-engine/issues"
Source = "https://github.com/Tomperez98/customer-engine"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.rye]
managed = true
dev-dependencies = [
    "pytest-asyncio",
    "types-toml",
    "alembic",
    "pytest-cov",
    "click",
    "ruff",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src/customer_engine_api"]

[tool.ruff]
line-length = 88
fix = false
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
preview = true
ignore = [
    "ANN101",
    "D203",
    "D212",
    "COM812",
    "COM819",
    "D206",
    "E501",
    "ISC001",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
    "UP040",
    "CPY001",
]
select = ["ALL"]
logger-objects = ["customer_engine_api.core.logging.logger"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "mashumaro.mixins.orjson.DataClassORJSONMixin",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
enum = { msg = "`enum` is banned: Python enums are not allowed. Use typing.Literal and typing.TypeAlias to build enums" }

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["INP001", "S101", "D"]
"scripts/*.py" = ["INP001", "D103"]
"src/customer_engine_api/migrations/**/*.py" = ["D103"]
"src/customer_engine_api/cli/*.py" = ["S404"]

[tool.ruff.lint.isort]
known-first-party = ["customer_engine_api"]
combine-as-imports = true
required-imports = ["from __future__ import annotations"]


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
    "--cov-config=pyproject.toml",
    "--cov=customer_engine_api",
    "--cov-report=term-missing:skip-covered",
]
markers = [
    "integration: mark integration tests.",
    "unit: mark unittest.",
    "e2e: mark end to end tests.",
]
asyncio_mode = "auto"
filterwarnings = ["ignore::DeprecationWarning"]

[tool.coverage.run]
branch = true
parallel = true
relative_files = true
omit = [
    "src/customer_engine_api/migrations/**",
    "src/customer_engine_api/api/**",
]

[tool.coverage.report]
exclude_lines = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@overload",
    "raise NotImplementedError",
    "assert_never",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
follow_imports = "normal"
strict_optional = false
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true
explicit_package_bases = true


[tool.vulture]
exclude = ["src/customer_engine_api/migrations/versions/"]
min_confidence = 80

[[tool.mypy.overrides]]
module = ["cohere", "cohere.responses.embeddings"]
ignore_missing_imports = true
